var searchIndex = {};
searchIndex['syncbox'] = {"items":[[0,"","syncbox","A collection of utilities for writing concurrent code."],[0,"util","",""],[3,"LinkedQueue","syncbox::util","A queue in which values are contained by a linked list."],[3,"ThreadPool","",""],[0,"async","","Composable primitives for asynchronous computations"],[3,"Future","syncbox::util::async",""],[3,"Complete","","An object that is used to fulfill or reject an associated Future."],[3,"Stream","",""],[3,"StreamIter","",""],[3,"Sender","","The sending half of `Stream::pair()`. Can only be owned by a single task at\na time."],[3,"Receipt","",""],[4,"AsyncError","",""],[13,"ExecutionError","","",0],[13,"CancellationError","","",0],[5,"join","",""],[5,"select","",""],[11,"pair","","",1],[11,"of","","Returns a future that will immediately succeed with the supplied value.",1],[11,"error","","Returns a future that will immediately fail with the supplied error.",1],[11,"canceled","","Returns a future that will immediately be cancelled",1],[11,"lazy","","Returns a future that won't kick off its async action until\na consumer registers interest.",1],[11,"map","","",1],[11,"spawn","","Returns a `Future` representing the completion of the given closure.\nThe closure will be executed on a newly spawned thread.",1],[11,"as_stream","","An adapter that converts any future into a one-value stream",1],[11,"is_ready","","",1],[11,"is_err","","",1],[11,"poll","","",1],[11,"ready","","",1],[11,"await","","",1],[11,"pair","","",1],[11,"fmt","","",1],[11,"drop","","",1],[11,"cancel","","",2],[11,"complete","","Fulfill the associated promise with a value",3],[11,"fail","","Reject the associated promise with an error. The error\nwill be wrapped in an `ExecutionError`.",3],[11,"is_ready","","",3],[11,"is_err","","",3],[11,"ready","","",3],[11,"await","","",3],[11,"is_ready","","",3],[11,"is_err","","",3],[11,"poll","","",3],[11,"ready","","",3],[11,"drop","","",3],[11,"fmt","","",3],[11,"cancel","","",2],[11,"pair","","Creates a new `Stream`, returning it with the associated `Sender`.",4],[11,"iter","","Synchronously iterate over the `Stream`",4],[11,"each","","",4],[11,"filter","","",4],[11,"map","","",4],[11,"reduce","","",4],[11,"take","","",4],[11,"take_while","","",4],[11,"take_until","","",4],[11,"is_ready","","",4],[11,"is_err","","",4],[11,"poll","","",4],[11,"ready","","",4],[11,"await","","",4],[11,"pair","","",4],[11,"fmt","","",4],[11,"drop","","",4],[11,"cancel","","",2],[11,"send","","Attempts to send a value to its `Stream`. Consumes self and returns a\nfuture representing the operation completing successfully and interest\nin the next value being expressed.",5],[11,"fail","","",5],[11,"is_ready","","",5],[11,"is_err","","",5],[11,"poll","","",5],[11,"ready","","",5],[11,"drop","","",5],[11,"fmt","","",5],[11,"cancel","","",2],[11,"cancel","","",2],[11,"next","","",6],[11,"drop","","",6],[6,"AsyncResult","",""],[8,"Join","",""],[10,"join","","",7],[8,"Select","",""],[10,"select","","",8],[8,"Async","","A value representing an asynchronous computation"],[16,"Value","syncbox::util::async::Async",""],[16,"Error","",""],[16,"Cancel","",""],[10,"is_ready","syncbox::util::async","Returns true if `take` will succeed.",9],[10,"is_err","","Returns true if the async value is ready and has failed",9],[10,"poll","","Get the underlying value if present",9],[11,"expect","","Get the underlying value if present, panic otherwise",9],[10,"ready","","Invokes the given function when the Async instance is ready to be\nconsumed.",9],[11,"receive","","Invoke the callback with the resolved `Async` result.",9],[11,"receive_defer","","Invoke the callback on the specified `Run` with the resolved `Async`\nresult.",9],[11,"await","","",9],[11,"handle","","",9],[11,"and","","This method returns a future whose completion value depends on the completion value of the\noriginal future.",9],[11,"and_then","","This method returns a future whose completion value depends on the completion value of the\noriginal future.",9],[11,"or","","This method returns a future whose completion value depends on the completion value of the\noriginal future.",9],[11,"or_else","","This method returns a future whose completion value depends on the completion value of the\noriginal future.",9],[8,"Pair","",""],[16,"Tx","syncbox::util::async::Pair",""],[10,"pair","syncbox::util::async","",10],[8,"Cancel","",""],[10,"cancel","","",11],[6,"Value","",""],[6,"Error","",""],[6,"Cancel","",""],[11,"is_ready","","",12],[11,"is_err","","",12],[11,"poll","","",12],[11,"ready","","",12],[11,"await","","",12],[11,"cancel","core::option","",13],[6,"Value","syncbox::util::async",""],[6,"Error","",""],[6,"Cancel","",""],[6,"Value","",""],[6,"Error","",""],[6,"Cancel","",""],[6,"Value","",""],[6,"Error","",""],[6,"Cancel","",""],[11,"is_ready","collections::string","",14],[11,"is_err","","",14],[11,"poll","","",14],[11,"ready","","",14],[11,"await","","",14],[6,"Value","syncbox::util::async",""],[6,"Error","",""],[6,"Cancel","",""],[6,"Value","",""],[6,"Error","",""],[6,"Cancel","",""],[6,"Value","",""],[6,"Error","",""],[6,"Cancel","",""],[6,"Value","",""],[6,"Error","",""],[6,"Cancel","",""],[6,"Value","",""],[6,"Error","",""],[6,"Cancel","",""],[6,"Value","",""],[6,"Error","",""],[6,"Cancel","",""],[6,"Value","",""],[6,"Error","",""],[6,"Cancel","",""],[6,"Value","",""],[6,"Error","",""],[6,"Cancel","",""],[6,"Value","",""],[6,"Error","",""],[6,"Cancel","",""],[6,"Value","",""],[6,"Error","",""],[6,"Cancel","",""],[6,"Value","",""],[6,"Error","",""],[6,"Cancel","",""],[11,"is_ready","collections::vec","",15],[11,"is_err","","",15],[11,"poll","","",15],[11,"ready","","",15],[11,"await","","",15],[11,"eq","syncbox::util::async","",0],[11,"ne","","",0],[11,"wrap","","",0],[11,"canceled","","",0],[11,"is_cancellation","","",0],[11,"is_execution_error","","",0],[11,"unwrap","","",0],[11,"take","","",0],[11,"fmt","","",0],[0,"atomic","syncbox::util",""],[11,"new","core::atomic","Creates a new `AtomicIsize`.",16],[11,"load","","Loads a value from the isize.",16],[11,"store","","Stores a value into the isize.",16],[11,"swap","","Stores a value into the isize, returning the old value.",16],[11,"compare_and_swap","","Stores a value into the isize if the current value is the same as the expected value.",16],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",16],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",16],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",16],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",16],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",16],[11,"clone","core::num::wrapping","",17],[11,"cmp","","",17],[11,"partial_cmp","","",17],[11,"lt","","",17],[11,"le","","",17],[11,"gt","","",17],[11,"ge","","",17],[11,"eq","","",17],[11,"ne","","",17],[6,"Output","syncbox::util::atomic",""],[11,"add","core::num::wrapping","",17],[6,"Output","syncbox::util::atomic",""],[11,"sub","core::num::wrapping","",17],[6,"Output","syncbox::util::atomic",""],[11,"mul","core::num::wrapping","",17],[6,"Output","syncbox::util::atomic",""],[11,"not","core::num::wrapping","",17],[6,"Output","syncbox::util::atomic",""],[11,"bitxor","core::num::wrapping","",17],[6,"Output","syncbox::util::atomic",""],[11,"bitor","core::num::wrapping","",17],[6,"Output","syncbox::util::atomic",""],[11,"bitand","core::num::wrapping","",17],[6,"Output","syncbox::util::atomic",""],[11,"shl","core::num::wrapping","",17],[6,"Output","syncbox::util::atomic",""],[11,"shr","core::num::wrapping","",17],[11,"fmt","core::num","",18],[11,"eq","","",18],[11,"ne","","",18],[6,"Err","syncbox::util::atomic",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[11,"eq","core::num","",19],[11,"ne","","",19],[11,"clone","","",19],[11,"fmt","","",19],[11,"eq","","",20],[11,"ne","","",20],[11,"clone","","",20],[11,"fmt","","",20],[11,"fmt","","",19],[11,"description","","",19],[11,"eq","","",21],[11,"ne","","",21],[11,"clone","","",21],[11,"fmt","","",21],[11,"eq","","",22],[11,"ne","","",22],[11,"clone","","",22],[11,"fmt","","",22],[11,"fmt","","",21],[11,"description","","",21],[11,"hash","core::nonzero","",23],[11,"fmt","","",23],[11,"partial_cmp","","",23],[11,"lt","","",23],[11,"le","","",23],[11,"gt","","",23],[11,"ge","","",23],[11,"cmp","","",23],[11,"eq","","",23],[11,"ne","","",23],[11,"clone","","",23],[11,"new","","Create an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",23],[6,"Target","syncbox::util::atomic",""],[11,"deref","core::nonzero","",23],[6,"Target","syncbox::util::atomic",""],[6,"Target","",""],[6,"Target","",""],[11,"new","core::ptr","Create a new `Unique`.",24],[11,"get","","Dereference the content.",24],[11,"get_mut","","Mutably dereference the content.",24],[6,"Target","syncbox::util::atomic",""],[11,"deref","core::ptr","",24],[11,"cmp","core::marker","",25],[11,"partial_cmp","","",25],[11,"lt","","",25],[11,"le","","",25],[11,"gt","","",25],[11,"ge","","",25],[11,"eq","","",25],[11,"ne","","",25],[11,"clone","","",25],[11,"cmp","","",26],[11,"partial_cmp","","",26],[11,"lt","","",26],[11,"le","","",26],[11,"gt","","",26],[11,"ge","","",26],[11,"eq","","",26],[11,"ne","","",26],[11,"clone","","",26],[11,"hash","","",27],[11,"eq","","",27],[11,"partial_cmp","","",27],[11,"cmp","","",27],[11,"clone","","",27],[6,"Output","syncbox::util::atomic",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[11,"eq","core::ops","",28],[11,"ne","","",28],[11,"clone","","",28],[11,"fmt","","",28],[11,"eq","","",29],[11,"ne","","",29],[11,"clone","","",29],[11,"fmt","","",29],[11,"eq","","",30],[11,"ne","","",30],[11,"clone","","",30],[11,"fmt","","",30],[11,"eq","","",31],[11,"ne","","",31],[11,"clone","","",31],[11,"fmt","","",31],[6,"Target","syncbox::util::atomic",""],[6,"Target","",""],[6,"Output","",""],[6,"Output","",""],[11,"fmt","core::cmp","",32],[11,"eq","","",32],[11,"ne","","",32],[11,"clone","","",32],[11,"reverse","","Reverse the `Ordering`.",32],[11,"cmp","","",32],[11,"partial_cmp","","",32],[11,"is","syncbox::util","Returns true if the boxed type is the same as `T`",33],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",33],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",33],[11,"hash","core::any","",34],[11,"fmt","","",34],[11,"eq","","",34],[11,"ne","","",34],[11,"clone","","",34],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",34],[11,"new","core::atomic","Creates a new `AtomicBool`.",35],[11,"load","","Loads a value from the bool.",35],[11,"store","","Stores a value into the bool.",35],[11,"swap","","Stores a value into the bool, returning the old value.",35],[11,"compare_and_swap","","Stores a value into the bool if the current value is the same as the expected value.",35],[11,"fetch_and","","Logical \"and\" with a boolean value.",35],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",35],[11,"fetch_or","","Logical \"or\" with a boolean value.",35],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",35],[11,"new","","Creates a new `AtomicUsize`.",36],[11,"load","","Loads a value from the usize.",36],[11,"store","","Stores a value into the usize.",36],[11,"swap","","Stores a value into the usize, returning the old value.",36],[11,"compare_and_swap","","Stores a value into the usize if the current value is the same as the expected value.",36],[11,"fetch_add","","Add to the current usize, returning the previous value.",36],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",36],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",36],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",36],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",36],[11,"new","","Creates a new `AtomicPtr`.",37],[11,"load","","Loads a value from the pointer.",37],[11,"store","","Stores a value into the pointer.",37],[11,"swap","","Stores a value into the pointer, returning the old value.",37],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the expected value.",37],[11,"new","","",38],[11,"load","","",38],[11,"store","","",38],[11,"swap","","",38],[11,"compare_and_swap","","",38],[11,"fetch_add","","",38],[11,"fetch_sub","","",38],[11,"fetch_and","","",38],[11,"fetch_or","","",38],[11,"fetch_xor","","",38],[11,"new","","",39],[11,"load","","",39],[11,"store","","",39],[11,"swap","","",39],[11,"compare_and_swap","","",39],[11,"fetch_add","","",39],[11,"fetch_sub","","",39],[11,"fetch_and","","",39],[11,"fetch_or","","",39],[11,"fetch_xor","","",39],[11,"new","core::cell","Creates a new `Cell` containing the given value.",40],[11,"get","","Returns a copy of the contained value.",40],[11,"set","","Sets the contained value.",40],[11,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",40],[11,"clone","","",40],[11,"default","","",40],[11,"eq","","",40],[11,"fmt","","",41],[11,"eq","","",41],[11,"ne","","",41],[11,"clone","","",41],[11,"new","","Creates a new `RefCell` containing `value`.",42],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",42],[11,"borrow_state","","Query the current state of this `RefCell`",42],[11,"try_borrow","","Attempts to immutably borrow the wrapped value.",42],[11,"borrow","","Immutably borrows the wrapped value.",42],[11,"try_borrow_mut","","Mutably borrows the wrapped value.",42],[11,"borrow_mut","","Mutably borrows the wrapped value.",42],[11,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",42],[11,"clone","","",42],[11,"default","","",42],[11,"eq","","",42],[11,"drop","","",43],[11,"clone","","",43],[6,"Target","syncbox::util::atomic",""],[11,"deref","core::cell","",44],[11,"drop","","",45],[6,"Target","syncbox::util::atomic",""],[11,"deref","core::cell","",46],[11,"deref_mut","","",46],[11,"new","","Construct a new instance of `UnsafeCell` which will wrap the specified\nvalue.",47],[11,"get","","Gets a mutable pointer to the wrapped value.",47],[11,"into_inner","","Unwraps the value",47],[11,"clone","core::char","",48],[11,"clone","","",49],[6,"Item","syncbox::util::atomic",""],[11,"next","core::char","",48],[11,"clone","","",50],[11,"clone","","",51],[6,"Item","syncbox::util::atomic",""],[11,"next","core::char","",50],[11,"drop","core::finally","",52],[6,"Item","syncbox::util::atomic",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"clone","core::iter","",53],[6,"Item","syncbox::util::atomic",""],[11,"next","core::iter","",53],[11,"size_hint","","",53],[11,"next_back","","",53],[11,"indexable","","",53],[11,"idx","","",53],[11,"fmt","","",54],[11,"eq","","",54],[11,"ne","","",54],[11,"clone","","",54],[11,"into_option","","`into_option` creates an `Option` of type `(T,T)`. The returned `Option` has variant\n`None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise variant\n`Some(x,y)` is returned where `x <= y`. If `MinMaxResult` has variant `OneElement(x)`,\nperforming this operation will make one clone of `x`.",54],[11,"clone","","",55],[6,"Item","syncbox::util::atomic",""],[11,"next","core::iter","",55],[11,"size_hint","","",55],[11,"next_back","","",55],[11,"indexable","","",55],[11,"idx","","",55],[11,"clone","","",56],[6,"Item","syncbox::util::atomic",""],[11,"next","core::iter","",56],[11,"size_hint","","",56],[11,"indexable","","",56],[11,"idx","","",56],[11,"clone","","",57],[6,"Item","syncbox::util::atomic",""],[11,"next","core::iter","",57],[11,"size_hint","","",57],[11,"next_back","","",57],[11,"indexable","","",57],[11,"idx","","",57],[11,"clone","","",58],[6,"Item","syncbox::util::atomic",""],[11,"next","core::iter","",58],[11,"size_hint","","",58],[11,"next_back","","",58],[11,"indexable","","",58],[11,"idx","","",58],[11,"clone","","",59],[6,"Item","syncbox::util::atomic",""],[11,"next","core::iter","",59],[11,"size_hint","","",59],[11,"next_back","","",59],[11,"indexable","","",59],[11,"idx","","",59],[11,"clone","","",60],[6,"Item","syncbox::util::atomic",""],[11,"next","core::iter","",60],[11,"size_hint","","",60],[11,"next_back","","",60],[11,"clone","","",61],[6,"Item","syncbox::util::atomic",""],[11,"next","core::iter","",61],[11,"size_hint","","",61],[11,"next_back","","",61],[11,"clone","","",62],[6,"Item","syncbox::util::atomic",""],[11,"next","core::iter","",62],[11,"size_hint","","",62],[11,"next_back","","",62],[11,"indexable","","",62],[11,"idx","","",62],[11,"clone","","",63],[6,"Item","syncbox::util::atomic",""],[11,"next","core::iter","",63],[11,"size_hint","","",63],[11,"peek","","Return a reference to the next element of the iterator with out\nadvancing it, or None if the iterator is exhausted.",63],[11,"is_empty","","Check whether peekable iterator is empty or not.",63],[11,"clone","","",64],[6,"Item","syncbox::util::atomic",""],[11,"next","core::iter","",64],[11,"size_hint","","",64],[11,"clone","","",65],[6,"Item","syncbox::util::atomic",""],[11,"next","core::iter","",65],[11,"size_hint","","",65],[11,"clone","","",66],[6,"Item","syncbox::util::atomic",""],[11,"next","core::iter","",66],[11,"size_hint","","",66],[11,"indexable","","",66],[11,"idx","","",66],[11,"clone","","",67],[6,"Item","syncbox::util::atomic",""],[11,"next","core::iter","",67],[11,"size_hint","","",67],[11,"indexable","","",67],[11,"idx","","",67],[11,"clone","","",68],[6,"Item","syncbox::util::atomic",""],[11,"next","core::iter","",68],[11,"size_hint","","",68],[11,"clone","","",69],[6,"Item","syncbox::util::atomic",""],[11,"next","core::iter","",69],[11,"size_hint","","",69],[11,"next_back","","",69],[11,"clone","","",70],[6,"Item","syncbox::util::atomic",""],[11,"next","core::iter","",70],[11,"size_hint","","",70],[11,"next_back","","",70],[11,"indexable","","",70],[11,"idx","","",70],[11,"reset_fuse","","Resets the fuse such that the next call to .next() or .next_back() will\ncall the underlying iterator again even if it previously returned None.",70],[11,"clone","","",71],[6,"Item","syncbox::util::atomic",""],[11,"next","core::iter","",71],[11,"size_hint","","",71],[11,"next_back","","",71],[11,"indexable","","",71],[11,"idx","","",71],[11,"clone","","",72],[11,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the closure",72],[6,"Item","syncbox::util::atomic",""],[11,"next","core::iter","",72],[11,"size_hint","","",72],[11,"clone","","",73],[6,"Item","syncbox::util::atomic",""],[11,"next","core::iter","",73],[11,"size_hint","","",73],[11,"clone","","",74],[6,"Item","syncbox::util::atomic",""],[11,"next","core::iter","",74],[11,"size_hint","","",74],[11,"next_back","","",74],[11,"clone","","",75],[6,"Item","syncbox::util::atomic",""],[11,"next","core::iter","",75],[11,"size_hint","","",75],[11,"next_back","","",75],[11,"clone","","",76],[6,"Item","syncbox::util::atomic",""],[11,"next","core::iter","",76],[11,"clone","","",77],[6,"Item","syncbox::util::atomic",""],[11,"next","core::iter","",77],[6,"Item","syncbox::util::atomic",""],[11,"next","core::ops","",29],[11,"size_hint","","",29],[11,"next_back","","",29],[6,"Item","syncbox::util::atomic",""],[11,"next","core::ops","",30],[11,"clone","core::iter","",78],[6,"Item","syncbox::util::atomic",""],[11,"next","core::iter","",78],[11,"size_hint","","",78],[11,"next_back","","",78],[11,"indexable","","",78],[11,"idx","","",78],[11,"hash","core::option","",13],[11,"fmt","","",13],[11,"cmp","","",13],[11,"partial_cmp","","",13],[11,"lt","","",13],[11,"le","","",13],[11,"gt","","",13],[11,"ge","","",13],[11,"eq","","",13],[11,"ne","","",13],[11,"clone","","",13],[11,"is_some","","Returns `true` if the option is a `Some` value",13],[11,"is_none","","Returns `true` if the option is a `None` value",13],[11,"as_ref","","Convert from `Option<T>` to `Option<&T>`",13],[11,"as_mut","","Convert from `Option<T>` to `Option<&mut T>`",13],[11,"as_mut_slice","","Convert from `Option<T>` to `&mut [T]` (without copying)",13],[11,"expect","","Unwraps an option, yielding the content of a `Some`",13],[11,"unwrap","","Returns the inner `T` of a `Some(T)`.",13],[11,"unwrap_or","","Returns the contained value or a default.",13],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",13],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",13],[11,"map_or","","Applies a function to the contained value or returns a default.",13],[11,"map_or_else","","Applies a function to the contained value or computes a default.",13],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",13],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",13],[11,"iter","","Returns an iterator over the possibly contained value.",13],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",13],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",13],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",13],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",13],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",13],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",13],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",13],[11,"cloned","","Maps an Option<D> to an Option<T> by dereffing and cloning the contents of the Option.\nUseful for converting an Option<&T> to an Option<T>.",13],[11,"unwrap_or_default","","Returns the contained value or a default",13],[11,"as_slice","","Convert from `Option<T>` to `&[T]` (without copying)",13],[11,"default","","",13],[11,"clone","","",79],[6,"Item","syncbox::util::atomic",""],[11,"next","core::option","",79],[11,"size_hint","","",79],[11,"next_back","","",79],[6,"Item","syncbox::util::atomic",""],[11,"next","core::option","",80],[11,"size_hint","","",80],[11,"next_back","","",80],[11,"clone","","",80],[6,"Item","syncbox::util::atomic",""],[11,"next","core::option","",81],[11,"size_hint","","",81],[11,"next_back","","",81],[6,"Item","syncbox::util::atomic",""],[11,"next","core::option","",82],[11,"size_hint","","",82],[11,"next_back","","",82],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",13],[11,"hash","core::result","",83],[11,"fmt","","",83],[11,"cmp","","",83],[11,"partial_cmp","","",83],[11,"lt","","",83],[11,"le","","",83],[11,"gt","","",83],[11,"ge","","",83],[11,"eq","","",83],[11,"ne","","",83],[11,"clone","","",83],[11,"is_ok","","Returns true if the result is `Ok`",83],[11,"is_err","","Returns true if the result is `Err`",83],[11,"ok","","Convert from `Result<T, E>` to `Option<T>`",83],[11,"err","","Convert from `Result<T, E>` to `Option<E>`",83],[11,"as_ref","","Convert from `Result<T, E>` to `Result<&T, &E>`",83],[11,"as_mut","","Convert from `Result<T, E>` to `Result<&mut T, &mut E>`",83],[11,"as_mut_slice","","Convert from `Result<T, E>` to `&mut [T]` (without copying)",83],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",83],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",83],[11,"iter","","Returns an iterator over the possibly contained value.",83],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",83],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",83],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",83],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",83],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",83],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",83],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",83],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",83],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",83],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",83],[11,"as_slice","","Convert from `Result<T, E>` to `&[T]` (without copying)",83],[6,"Item","syncbox::util::atomic",""],[11,"next","core::result","",84],[11,"size_hint","","",84],[11,"next_back","","",84],[11,"clone","","",84],[6,"Item","syncbox::util::atomic",""],[11,"next","core::result","",85],[11,"size_hint","","",85],[11,"next_back","","",85],[6,"Item","syncbox::util::atomic",""],[11,"next","core::result","",86],[11,"size_hint","","",86],[11,"next_back","","",86],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",83],[11,"fmt","core::simd","",87],[11,"fmt","","",88],[11,"fmt","","",89],[11,"fmt","","",90],[11,"fmt","","",91],[11,"fmt","","",92],[11,"fmt","","",93],[11,"fmt","","",94],[11,"fmt","","",95],[11,"fmt","","",96],[6,"Item","syncbox::util::atomic",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Output","",""],[11,"index","core::slice","",97],[6,"Output","syncbox::util::atomic",""],[11,"index","core::slice","",97],[6,"Output","syncbox::util::atomic",""],[11,"index","core::slice","",97],[6,"Output","syncbox::util::atomic",""],[11,"index","core::slice","",97],[11,"as_slice","","View the underlying data as a subslice of the original data.",97],[6,"Item","syncbox::util::atomic",""],[11,"next","core::slice","",97],[11,"size_hint","","",97],[11,"next_back","","",97],[11,"clone","","",97],[11,"indexable","","",97],[11,"idx","","",97],[6,"Output","syncbox::util::atomic",""],[11,"index","core::slice","",98],[6,"Output","syncbox::util::atomic",""],[11,"index","core::slice","",98],[6,"Output","syncbox::util::atomic",""],[11,"index","core::slice","",98],[6,"Output","syncbox::util::atomic",""],[11,"index","core::slice","",98],[11,"index_mut","","",98],[11,"index_mut","","",98],[11,"index_mut","","",98],[11,"index_mut","","",98],[11,"into_slice","","View the underlying data as a subslice of the original data.",98],[6,"Item","syncbox::util::atomic",""],[11,"next","core::slice","",98],[11,"size_hint","","",98],[11,"next_back","","",98],[11,"clone","","",99],[6,"Item","syncbox::util::atomic",""],[11,"next","core::slice","",99],[11,"size_hint","","",99],[11,"next_back","","",99],[11,"finish","","",99],[11,"finish","","",100],[6,"Item","syncbox::util::atomic",""],[11,"next","core::slice","",100],[11,"size_hint","","",100],[11,"next_back","","",100],[6,"Item","syncbox::util::atomic",""],[11,"next","core::slice","",101],[11,"size_hint","","",101],[6,"Item","syncbox::util::atomic",""],[11,"next","core::slice","",102],[11,"size_hint","","",102],[6,"Item","syncbox::util::atomic",""],[11,"next","core::slice","",103],[11,"size_hint","","",103],[6,"Item","syncbox::util::atomic",""],[11,"next","core::slice","",104],[11,"size_hint","","",104],[6,"Item","syncbox::util::atomic",""],[11,"next","core::slice","",105],[11,"size_hint","","",105],[11,"clone","","",106],[6,"Item","syncbox::util::atomic",""],[11,"next","core::slice","",106],[11,"size_hint","","",106],[11,"next_back","","",106],[11,"indexable","","",106],[11,"idx","","",106],[11,"clone","","",107],[6,"Item","syncbox::util::atomic",""],[11,"next","core::slice","",107],[11,"size_hint","","",107],[11,"next_back","","",107],[11,"indexable","","",107],[11,"idx","","",107],[6,"Item","syncbox::util::atomic",""],[11,"next","core::slice","",108],[11,"size_hint","","",108],[11,"next_back","","",108],[11,"fmt","core::str::pattern","",109],[11,"eq","","",109],[11,"ne","","",109],[11,"clone","","",109],[6,"Searcher","syncbox::util::atomic",""],[11,"into_searcher","core::str::pattern","",110],[11,"haystack","","",111],[11,"next","","",111],[11,"next_back","","",111],[11,"clone","","",112],[6,"Searcher","syncbox::util::atomic",""],[11,"haystack","core::str::pattern","",112],[11,"next","","",112],[11,"next_back","","",112],[6,"Searcher","syncbox::util::atomic",""],[6,"Searcher","",""],[6,"Searcher","",""],[6,"Searcher","",""],[6,"Err","",""],[11,"eq","core::str","",113],[11,"ne","","",113],[11,"clone","","",113],[11,"fmt","","",113],[11,"fmt","","",113],[11,"description","","",113],[11,"fmt","","",114],[11,"clone","","",114],[11,"eq","","",114],[11,"ne","","",114],[11,"description","","",114],[11,"fmt","","",114],[11,"clone","","",115],[6,"Item","syncbox::util::atomic",""],[11,"next","core::str","",115],[11,"size_hint","","",115],[11,"next_back","","",115],[11,"clone","","",116],[6,"Item","syncbox::util::atomic",""],[11,"next","core::str","",116],[11,"size_hint","","",116],[11,"next_back","","",116],[11,"clone","","",117],[6,"Item","syncbox::util::atomic",""],[11,"next","core::str","",117],[11,"size_hint","","",117],[11,"next_back","","",117],[11,"len","","",117],[11,"clone","","",118],[6,"Output","syncbox::util::atomic",""],[11,"call","core::str","",118],[6,"Item","syncbox::util::atomic",""],[11,"next","core::str","",119],[11,"next_back","","",119],[6,"Item","syncbox::util::atomic",""],[11,"next","core::str","",120],[11,"clone","","",121],[11,"clone","","",122],[11,"clone","","",123],[6,"Item","syncbox::util::atomic",""],[11,"next","core::str","",124],[6,"Item","syncbox::util::atomic",""],[11,"next","core::str","",125],[6,"Output","syncbox::util::atomic",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Item","",""],[11,"next","core::str","",126],[11,"next_back","","",126],[6,"Item","syncbox::util::atomic",""],[11,"next","core::str","",127],[11,"size_hint","","",127],[11,"next_back","","",127],[6,"Item","syncbox::util::atomic",""],[11,"next","core::str","",128],[11,"size_hint","","",128],[6,"Item","syncbox::util::atomic",""],[11,"next","core::str","",129],[11,"size_hint","","",129],[6,"Item","syncbox::util::atomic",""],[11,"next","core::str","",130],[11,"size_hint","","",130],[11,"next_back","","",130],[6,"Item","syncbox::util::atomic",""],[11,"next","core::str","",131],[11,"size_hint","","",131],[11,"next_back","","",131],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",132],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",132],[11,"result","","Returns the computed hash.",132],[11,"write","","",132],[11,"finish","","",132],[11,"clone","","",132],[11,"default","","",132],[11,"eq","core::fmt::num","",133],[11,"ne","","",133],[11,"clone","","",133],[11,"eq","","",134],[11,"ne","","",134],[11,"clone","","",134],[11,"eq","","",135],[11,"ne","","",135],[11,"clone","","",135],[11,"eq","","",136],[11,"ne","","",136],[11,"clone","","",136],[11,"eq","","",137],[11,"ne","","",137],[11,"clone","","",137],[11,"eq","","",138],[11,"ne","","",138],[11,"clone","","",138],[11,"fmt","","",139],[11,"fmt","","",139],[11,"fmt","","",139],[11,"fmt","","",139],[11,"fmt","","",139],[11,"fmt","","",139],[11,"fmt","","",139],[11,"fmt","","",139],[11,"fmt","","",139],[11,"fmt","","",139],[11,"fmt","","",139],[11,"fmt","","",139],[11,"fmt","","",139],[11,"fmt","","",139],[11,"fmt","","",139],[11,"fmt","","",139],[11,"fmt","","",139],[11,"fmt","","",139],[11,"fmt","","",139],[11,"fmt","","",139],[11,"eq","core::fmt::rt::v1","",140],[11,"ne","","",140],[11,"fmt","core::fmt","",141],[11,"fmt","","",142],[11,"fmt","","",142],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",143],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",143],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",143],[11,"write_fmt","","Writes some formatted information into this instance",143],[11,"flags","","Flags for formatting (packed version of rt::Flag)",143],[11,"fill","","Character used as 'fill' whenever there is alignment",143],[11,"align","","Flag indicating what form of alignment was requested",143],[11,"width","","Optionally specified integer width that the output should be",143],[11,"precision","","Optionally specified precision for numeric types",143],[11,"fmt","","",141],[11,"fmt","core::marker","",27],[11,"fmt","core::cell","",40],[11,"fmt","","",42],[11,"fmt","","",44],[11,"fmt","","",46],[6,"Item","syncbox::util::atomic",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[3,"AtomicIsize","","A signed integer type which can be safely shared between threads."],[3,"AtomicUsize","","An unsigned integer type which can be safely shared between threads."],[4,"Ordering","","Atomic memory orderings"],[13,"Relaxed","","No ordering constraints, only atomic operations.",144],[13,"Release","","When coupled with a store, all previous writes become visible\nto another thread that performs a load with `Acquire` ordering\non the same value.",144],[13,"Acquire","","When coupled with a load, all subsequent loads will see data\nwritten before a store with `Release` ordering on the same value\nin another thread.",144],[13,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store\n`Release` ordering.",144],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all\nsequentially consistent operations in the same order.",144],[5,"fence","","An atomic fence."],[3,"AtomicU64","",""],[3,"AtomicI64","",""],[3,"AtomicVal","",""],[11,"new","","",145],[11,"load","","",145],[11,"store","","",145],[11,"swap","","",145],[11,"compare_and_swap","","",145],[11,"fetch_add","","",145],[11,"fetch_sub","","",145],[11,"fetch_and","","",145],[11,"fetch_or","","",145],[11,"fetch_xor","","",145],[11,"new","","",146],[11,"load","","",146],[11,"store","","",146],[11,"swap","","",146],[11,"compare_and_swap","","",146],[11,"fetch_add","","",146],[11,"fetch_sub","","",146],[11,"fetch_and","","",146],[11,"fetch_or","","",146],[11,"fetch_xor","","",146],[8,"Atomic","","An atomic box"],[10,"new","","Returns a new atomic box",147],[10,"load","","Atomically loads the value from the box with the given ordering",147],[10,"store","","Atomically stores the value from the box with the given ordering",147],[10,"swap","","Atomically swaps the value in the box with the given ordering",147],[10,"compare_and_swap","","Swaps the value in the box if and only if the existing value is equal\nto `old`.",147],[8,"ToAtomicRepr","","A value that can be stored in an atomic box"],[16,"Repr","syncbox::util::atomic::ToAtomicRepr","The representation of the value when stored in an atomic box."],[10,"from_repr","syncbox::util::atomic","Load the value from the raw representation",148],[10,"to_repr","","Convert the value from the raw representation",148],[11,"new","","Returns a new atomic box",149],[11,"new","","Returns a new atomic box",149],[11,"load","","Atomically loads the value from the box with the given ordering",149],[11,"store","","Atomically stores the value from the box with the given ordering",149],[11,"swap","","Atomically swaps the value in the box with the given ordering",149],[11,"compare_and_swap","","Swaps the value in the box if and only if the existing value is equal\nto `old`.",149],[11,"new","","",36],[11,"load","","",36],[11,"store","","",36],[11,"swap","","",36],[11,"compare_and_swap","","",36],[11,"new","syncbox::util","",150],[11,"with_capacity","","",150],[11,"len","","",150],[11,"is_empty","","",150],[11,"offer","","",150],[11,"put","","",150],[11,"poll","","",150],[11,"take","","Takes from the queue, blocking until there is an element available.",150],[11,"poll","","",150],[11,"is_empty","","",150],[11,"offer","","",150],[11,"take","","",150],[11,"put","","",150],[11,"clone","","",150],[11,"fixed_size","","",151],[11,"single_thread","","",151],[11,"new","","",151],[11,"run","","",151],[11,"shutdown","","",151],[11,"shutdown_now","","",151],[11,"is_shutdown","","",151],[11,"await_termination","","",151],[11,"run","","",151],[8,"Queue","",""],[10,"poll","","Retrieves and removes the head of this queue or returns None if the\nqueue is empty.",152],[10,"is_empty","","Returns true if the underlying data structure does not contain any\nelements.",152],[10,"offer","","",152],[8,"SyncQueue","",""],[10,"take","","Retrieves and removes the head of this queue, waiting if necessary\nuntil an element becomes available.",153],[10,"put","","",153],[8,"Run","",""],[10,"run","","Runs the task on the underlying executor.",154],[11,"invoke","","",154],[11,"invoke","","",154]],"paths":[[4,"AsyncError"],[3,"Future"],[3,"Receipt"],[3,"Complete"],[3,"Stream"],[3,"Sender"],[3,"StreamIter"],[8,"Join"],[8,"Select"],[8,"Async"],[8,"Pair"],[8,"Cancel"],[6,"AsyncResult"],[4,"Option"],[3,"String"],[3,"Vec"],[3,"AtomicIsize"],[3,"Wrapping"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"NoCopy"],[3,"Managed"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicUsize"],[3,"AtomicPtr"],[3,"AtomicInt"],[3,"AtomicUint"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"BorrowRefMut"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Finallyalizer"],[3,"Rev"],[4,"MinMaxResult"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Unfold"],[3,"Counter"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"Repeat"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqPattern"],[3,"CharEqSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[4,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"BytesDeref"],[3,"CharSplits"],[3,"CharSplitsN"],[3,"TwoWaySearcher"],[4,"OldSearcher"],[3,"OldMatchIndices"],[3,"MatchIndices"],[3,"SplitStr"],[3,"Split"],[3,"SplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[4,"Alignment"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[4,"Ordering"],[3,"AtomicU64"],[3,"AtomicI64"],[8,"Atomic"],[8,"ToAtomicRepr"],[3,"AtomicVal"],[3,"LinkedQueue"],[3,"ThreadPool"],[8,"Queue"],[8,"SyncQueue"],[8,"Run"]]};
initSearch(searchIndex);
